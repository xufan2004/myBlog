(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{344:function(t,a,n){"use strict";n.r(a);var s=n(13),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ts中的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts中的类型"}},[t._v("#")]),t._v(" TS中的类型")]),t._v(" "),a("h2",{attrs:{id:"类型声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型声明"}},[t._v("#")]),t._v(" 类型声明")]),t._v(" "),a("ul",[a("li",[t._v("类型声明是TS非常重要的一个特点")]),t._v(" "),a("li",[t._v("通过类类型声明可以指定TS中变量(参数，形参)的类型")]),t._v(" "),a("li",[t._v("指定类型后，当变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错")]),t._v(" "),a("li",[t._v("简而言之，类型声明给变量设置了类型，使得变量只能存储魔种类型的值")]),t._v(" "),a("li",[t._v("语法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let 变量:类型;\nfunction fn(参数:类型,参数:类型):类型{\n\n}\n")])])]),a("h2",{attrs:{id:"类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("number // 任意数字\nstring // 任意字符串\nboolean // true OR false\n字面量 // 值就是字面量本身\nany // 任意类型什么样的值都可以\nunknown // 表示未知的值\nvoid // 没有值 || undefined (常用来在方法上使用)\nnever // 不可以有任何值 (常用来在方法上使用)\nobject // 任意的js对象\narray // 任意的js数组\ntuple // 固定长度的数组\nenum // 枚举\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);